var documenterSearchIndex = {"docs":
[{"location":"#JuLie.jl","page":"JuLie.jl","title":"JuLie.jl","text":"","category":"section"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"JuLie.jl is an early-stage Julia/OSCAR package with the goal to provide structures and fast algorithms for things around algebraic Lie theory, representation theory, and relevant combinatorics. These fields are huge and this package is still small—I hope it will grow with time. Contributions are necessary and very much welcome!","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"By Ulrich Thiel (ulthiel.com/math) and contributors.","category":"page"},{"location":"#Using","page":"JuLie.jl","title":"Using","text":"","category":"section"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"To install the package, you first need to install Julia. Then after starting Julia, type the following:","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"julia> using Pkg\r\njulia> Pkg.add(url=\"https://github.com/ulthiel/JuLie.jl\")","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"Now, you can start using the package as follows:","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"julia> using JuLie\r\njulia> partitions(10)","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"You can get help for a function by putting a question mark in front, e.g.","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"julia> ?partitions","category":"page"},{"location":"#Motivation","page":"JuLie.jl","title":"Motivation","text":"","category":"section"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"Especially for combinatorics there's a lot already in other computer algebra systems. So, why another package? First, I hope this package will eventually form one pillar of the OSCAR project. What convinced me of Julia as programming language is its straightforward high-level syntax (like Python) paired with incredible performance (unlike Pyhton). Have a look at the following examples creating the list (not an iterator) of all partitions of the integer 90 (there are ~56.6 million) in different computer algebra systems.","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"In Sage (v9.1):","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"sage: time X=Partitions(90).list()\r\nWall time: 3min 5s\r\n#Uses 26.665GiB mem, quitting Sage takes quite a bit of time","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"In GAP (v4.11.0):","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"gap> L:=Partitions(90);; time/1000.0;\r\n51.962\r\n#Uses 11.8477 GiB mem, still works fine","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"In Magma (v2.25-5):","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"> time X:=Partitions(90);\r\nTime: 32.990\r\n//Uses 15.688 GiB mem, Magma UNUSABLE from now on!!","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"And now, in Julia (v1.5.2, my implementation):","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"julia> @time partitions(Int8(90));\r\n5.447290 seconds (56.63 M allocations: 6.239 GiB, 46.77% gc time)\r\n#No problem afterwards","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"I'm cheating here a bit because I'm using 8-bit integers (thus saving memory). But we can also use bigger integers and the Julia implementation is still more efficient:","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"julia> @time partitions(Int64(90)); #this time with 64-bit integers\r\n16.481893 seconds (56.63 M allocations: 13.570 GiB, 57.15% gc time)\r\n#No problem","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"Having the possibility to work with special integer types is very useful sometimes. Of course, you can do the same in C—but Julia is a high-level language with a similar simple syntax like Python, so why would anyone still go through such a pain?","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"The Nemo package (part of OSCAR) provides incredibly fast arithmetic in various rings like integers, algebraic number fields, polynomial rings etc. that will be used here as well.","category":"page"},{"location":"#Developing","page":"JuLie.jl","title":"Developing","text":"","category":"section"},{"location":"#Setting-up-the-repository","page":"JuLie.jl","title":"Setting up the repository","text":"","category":"section"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"Clone this repository to somewhere on your computer:","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"git clone https://github.com/ulthiel/JuLie.jl","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"Enter the directory \"JuLie.jl\", start Julia, hit the \"]\" key to enter REPL mode, and then add the package to the registry:","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"dev .","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"Exit the REPL mode by hitting the backspace key. Then you can start using the package as usual with","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"using JuLie","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"Any changes you make to the code now will not be available in the current Julia session—you have to restart it. This is simply the way Julia works but this is annoying when developing. A solution is to load the Revise package before loading the package.","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"using Pkg\r\nPkg.add(\"Revise\")\r\nusing Revise\r\nusing JuLie","category":"page"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"Now, changes you make in the code are immediately available in the Julia session (except for changes to structures, here you need to restart).","category":"page"},{"location":"#Programming-guidelines","page":"JuLie.jl","title":"Programming guidelines","text":"","category":"section"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"Have a look at the file src/partitions.jl to see how the stuff works and how I want code to look like.\nCheck out the Julia Documentation, especially the Style Guide and the Performance Guide.\nEverything has to be well-documented, algorithms and papers have to be properly referenced.\nIf your implementation is not more efficient than those in other computer algebra systems then it's not good enough. (Don't take this too seriously, but at least try.)\nFor every function you implement, there has to be a reasonable test in test/runtests.jl. You can run the complete unit test with Pkg.test(\"JuLie\").\nFor large number arithmetic we use Nemo (type fmpz with constructor ZZ for integers, type fmpq with constructor QQ for rationals, etc.). See the file src/enum_func.jl for examples. For more general rings (polynomial rings, laurent polynomial rings, etc.) we use AbstractAlgebra, see src/quantum_numbers.jl for examples. This is all part of the OSCAR system.","category":"page"},{"location":"#Contributors","page":"JuLie.jl","title":"Contributors","text":"","category":"section"},{"location":"","page":"JuLie.jl","title":"JuLie.jl","text":"Tom Schmit (TU Kaiserslautern, 2020–)","category":"page"}]
}
